from __future__ import annotations

import logging
import os
from telegram import MenuButtonCommands
from telegram.request import HTTPXRequest
from telegram import BotCommand
import asyncio
import requests
from telegram.error import RetryAfter
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes,
    ConversationHandler, filters,)
import time
from messages_exporter import export_messages
from Parser import generate_report 
from messages_exporter import format_tender_message, fetch_tender_detail
from config import BOT_TOKEN
from config import TOKEN
from database import get_connection
from datetime import datetime

# —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
ASK_EXISTING, ENTER_KEY, ASK_MORE, ADDING_KEY, DELETING_KEY = range(5)

API_URL = "https://tenderplan.ru/api"


# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç last_ts ‚Äî –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–ª—é—á—É
def get_last_ts(user_id: int, key: str) -> int:
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute(
            "SELECT last_ts FROM subscription_state WHERE tg_user_id = ? AND tender_key = ?",
            (user_id, key)
        )
        row = cursor.fetchone()
        return row[0] if row else 0


# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–ª—é—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã user_keys
def get_user_keys(user_id: int) -> list[tuple[str,str]]:
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute(
       "SELECT tender_key, tender_name FROM user_keys WHERE tg_user_id=?", (user_id,)
        )
        return cursor.fetchall()


# –î–æ–±–∞–≤–ª—è–µ—Ç –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É user_keys (–µ—Å–ª–∏ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω)
def add_user_key(user_id: int, tender_key: str, tender_name: str = ""):
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute(
        "INSERT OR IGNORE INTO user_keys (tg_user_id, tender_key, tender_name) VALUES (?, ?, ?)",
        (user_id, tender_key, tender_name)
        )
        conn.commit()
   

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ active_keys.
def set_active_key(user_id: int, key: str):
    logger.info(f"–°–æ—Ö—Ä–∞–Ω—è—é active_key={key} –¥–ª—è user_id={user_id}")
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute(
            """      
            INSERT INTO active_keys (tg_user_id, tender_key) VALUES (?, ?)
            ON CONFLICT(tg_user_id) DO UPDATE SET tender_key=excluded.tender_key
            """, 
            (user_id, key))
        conn.commit()


# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π tender_key –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ user_id.
def get_active_key(user_id: int) -> str | None:
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute(
        "SELECT tender_key FROM active_keys WHERE tg_user_id = ?",
        (user_id,)
        )
        row = cursor.fetchone()
    # –ø—Ä–∏—Å–≤–æ–∏–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, —á—Ç–æ–±—ã –µ—ë –º–æ–∂–Ω–æ –±—ã–ª–æ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å
    key = row[0] if row else None
    logger.info(f"–ò–∑–≤–ª–µ–∫ active_key={key!r} –¥–ª—è user_id={user_id}")
    return key


def was_tender_sent(user_id: int, tender_id: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–∞–Ω–Ω—ã–π —Ç–µ–Ω–¥–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    with get_connection() as conn:
        cur = conn.cursor()
        cur.execute(
            "SELECT 1 FROM sent_tenders WHERE tg_user_id = ? AND tender_id = ?",
            (user_id, tender_id)
        )
        return cur.fetchone() is not None


def mark_tender_as_sent(user_id: int, tender_id: str):
    """
    –û—Ç–º–µ—á–∞–µ—Ç —Ç–µ–Ω–¥–µ—Ä –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é,
    —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏.
    """
    with get_connection() as conn:
        conn.execute(
            "INSERT OR IGNORE INTO sent_tenders (tg_user_id, tender_id) VALUES (?, ?)",
            (user_id, tender_id)
        )
        conn.commit()


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–ª—é—á–∞ —á–µ—Ä–µ–∑ callback_query.
async def finish_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    await q.edit_message_text("üëå –ö–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é! "
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–≥—Ä—É–∑–∏—Ç—å —Ç–µ–Ω–¥–µ—Ä—ã –∫–æ–º–∞–Ω–¥–æ–π /export"
    )
    return ConversationHandler.END


def update_subscription_state(user_id: int, key: str, last_ts: int):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ last_ts –¥–ª—è –ø–∞—Ä—ã (user_id, key).
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π –¥–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç–µ–Ω–¥–µ—Ä–∞
    –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–ª—é—á–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –æ–±–Ω–æ–≤–ª—è–µ—Ç last_ts,
    –∏–Ω–∞—á–µ –≤—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å.
    """
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute(
            """
            INSERT INTO subscription_state (tg_user_id, tender_key, last_ts)
            VALUES (?, ?, ?)
            ON CONFLICT(tg_user_id, tender_key) DO UPDATE
                SET last_ts=excluded.last_ts
            """, 
            (user_id, key, last_ts)
            )
        conn.commit()


def subscribe_user(user_id: int, key: str):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ç–µ–Ω–¥–µ—Ä–Ω—ã–π –∫–ª—é—á.
    
    - –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ subscription_state —Å —Ç–µ–∫—É—â–µ–π –º–µ—Ç–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏ (last_ts),
      —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —ç—Ç–æ–º—É –∫–ª—é—á—É.
    - –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É subscriptions, –µ—Å–ª–∏ —Ç–∞–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –µ—â—ë –Ω–µ—Ç.
    """
    now_ms = int(time.time()*1000)
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute(
            """
            INSERT INTO subscription_state (tg_user_id, tender_key, last_ts)
            VALUES (?, ?, ?)
            ON CONFLICT(tg_user_id, tender_key) DO UPDATE
                SET last_ts=excluded.last_ts
            """, 
            (user_id, key, now_ms)
            )
        cursor.execute(
            "INSERT OR IGNORE INTO subscriptions (tg_user_id, tender_key) VALUES (?, ?)",
            (user_id, key)
        )
        conn.commit()


def unsubscribe_user(user_id: int, key: str):
    """
    –£–¥–∞–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–π tender_key.
    –£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã subscriptions –ø–æ user_id –∏ –∫–ª—é—á—É.
    """
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute(
            "DELETE FROM subscriptions WHERE tg_user_id = ? AND tender_key = ?",
            (user_id, key))
        cursor.execute(
            "DELETE FROM subscription_state WHERE tg_user_id=? AND tender_key=?",
            (user_id, key)
        )
        conn.commit()


def get_subscriptions() -> list[tuple[int,str]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã subscriptions.
    –ö–∞–∂–¥–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –∫–æ—Ä—Ç–µ–∂–µ–º (tg_user_id, tender_key).
    """
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT tg_user_id, tender_key FROM subscriptions")
        rows = cursor.fetchall()
    return rows


def is_subscribed(user_id: int, key: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å user_id –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–π tender_key.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–Ω–∞—á–µ False.
    """
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute(
            "SELECT 1 FROM subscriptions WHERE tg_user_id = ? AND tender_key = ?",
            (user_id, key)
        )
        exists = cursor.fetchone() is not None
    return exists


# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å HTTP-–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –¥–ª—è API-–∑–∞–ø—Ä–æ—Å–æ–≤.
def get_headers():
    return {"Authorization": f"Bearer {TOKEN}", "Accept": "application/json"}


# --- –ö–æ–º–∞–Ω–¥–∞ /–∫–ª—é—á–∏ ‚Äî –≤—ã–≤–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –≤ context.user_data['my_keys'] –∫–ª—é—á–µ–π ---
async def keys_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_keys = get_user_keys(update.effective_user.id)
    if not user_keys:
        return await update.message.reply_text(
            "–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–ª—é—á–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ /start –∏ –¥–æ–±–∞–≤—å—Ç–µ."
        )
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–ª—é—á–µ–π
    key_buttons = [
        [InlineKeyboardButton(f"üîë {name or key[:12]}‚Ä¶", callback_data=f"select_key_{key}")]
        for key, name in user_keys
    ]
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    manage_buttons = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á", callback_data="change_key")],
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á", callback_data="delete_key")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="go_start")],
    ]
    # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π
    await update.message.reply_text(
        "–í–∞—à–∏ –∫–ª—é—á–∏:\n–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á:",
        reply_markup=InlineKeyboardMarkup(key_buttons + manage_buttons)
    )
    return ASK_EXISTING
    
# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç–µ–Ω–¥–µ—Ä–æ–≤.
# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª—é—á–∞.
# –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –µ–≥–æ.
# –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–ª—é—á–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç –≤—ã–≥—Ä—É–∑–∫–∏ (Excel, —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∏–ª–∏ –æ—Ç–º–µ–Ω–∞).
async def export_choice_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query:
        await query.answer()
        user_id = query.from_user.id
    else:
        user_id = update.effective_user.id            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –Ω–µ —á–µ—Ä–µ–∑ callback (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ /export)
    
    user_keys = get_user_keys(user_id)
    if not user_keys:
        text = "–£ –≤–∞—Å –Ω–µ—Ç –∫–ª—é—á–µ–π –¥–ª—è —Ä–∞–±–æ—Ç—ã. –î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á —á–µ—Ä–µ–∑ /start"
        if query:
            return await query.edit_message_text(text)
        else:
            return await update.message.reply_text(text)
    # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–π ‚Äî –≤—Å–µ–≥–¥–∞ –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å
    if len(user_keys) > 1:
        buttons = []
        for key, name in user_keys:
            label = name or key
            buttons.append([InlineKeyboardButton(f"{label}", callback_data=f"select_key_{key}")])
        text = ("–£ –≤–∞—Å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–π. –í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ –∫–∞–∫–æ–º—É —Å–¥–µ–ª–∞—Ç—å –ø–æ–∏—Å–∫ —Ç–µ–Ω–¥–µ—Ä–æ–≤:")
        if query:
            return await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(buttons))
        else:
            return await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(buttons))
        
     # –ï—Å–ª–∏ –æ–¥–∏–Ω –∫–ª—é—á ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    only_key, _ = user_keys[0]
    set_active_key(user_id, only_key)    
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìä –í Excel", callback_data="export_excel")],
        [InlineKeyboardButton("üí¨ –°–æ–æ–±—â–µ–Ω–∏—è–º–∏", callback_data="export_msgs")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞",        callback_data="cancel_export")]
    ])
    if query:
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤—ã–≥—Ä—É–∑–∫–∏ —Ç–µ–Ω–¥–µ—Ä–æ–≤:", reply_markup=kb)
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤—ã–≥—Ä—É–∑–∫–∏ —Ç–µ–Ω–¥–µ—Ä–æ–≤:", reply_markup=kb)


# --- –≠–∫—Å–ø–æ—Ä—Ç —Ç–µ–Ω–¥–µ—Ä–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è ---
async def export_to_messages_cb(update, context):
    q = update.callback_query
    await q.answer()
    user_id = q.from_user.id
    key_id  = get_active_key(user_id)
    msgs = export_messages(key_id)
    sent_count = 0
    for tid, text, atts in msgs:
        # —Å–æ–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è
        kb = None
        if atts:
            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ user_data –¥–ª—è callback
            context.user_data[f"atts_{tid}"] = atts
            kb = InlineKeyboardMarkup([[
                InlineKeyboardButton("üìé –î–æ–∫—É–º–µ–Ω—Ç—ã", callback_data=f"show_atts:{tid}")
            ]])
         # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –ª–æ–≤–∏–º flood‚Äë–∫–æ–Ω—Ç—Ä–æ–ª—å
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=text,
                parse_mode="HTML",
                disable_web_page_preview=True,
                reply_markup=kb
            )
        except RetryAfter as e:
            # Telegram –≥–æ–≤–æ—Ä–∏—Ç –ø–æ–¥–æ–∂–¥–∞—Ç—å e.retry_after —Å–µ–∫—É–Ω–¥
            await asyncio.sleep(e.retry_after)
            await context.bot.send_message(
                chat_id=user_id,
                text=text,
                parse_mode="HTML",
                disable_web_page_preview=True,
                reply_markup=kb
            )
        sent_count += 1
        # –ò –Ω–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        await asyncio.sleep(0.1)  # 100‚ÄØ–º—Å
    # –ø–æ—Å–ª–µ –≤—Å–µ—Ö ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    kb = [
        [InlineKeyboardButton("üìä –í Excel",       callback_data="export_excel")],
        [InlineKeyboardButton("‚Ü©Ô∏è –í –Ω–∞—á–∞–ª–æ",     callback_data="go_start")],
        [InlineKeyboardButton("üîë –°–º–µ–Ω–∏—Ç—å –∫–ª—é—á", callback_data="change_key")],
    ]
    # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ ‚Äî –¥–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
    subscribed = is_subscribed(user_id, key_id)
    if not subscribed:
        kb.insert(0, [InlineKeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤—ã–µ", callback_data="subscribe")])
    await context.bot.send_message(
    chat_id=user_id,
    text=f"‚úÖ –í—Å–µ —Ç–µ–Ω–¥–µ—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —á–∞—Ç.\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ–Ω–¥–µ—Ä–æ–≤: {sent_count}\n–ß—Ç–æ –¥–∞–ª—å—à–µ?",
    reply_markup=InlineKeyboardMarkup(kb)
    )
    return ConversationHandler.END

# --- –ü–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º —Å—Å—ã–ª–æ–∫ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã ---
async def show_attachments_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query; await q.answer()
    _, tid = q.data.split(":", 1)
    docs   = context.user_data.get(f"atts_{tid}", [])

    if not docs:
        return await context.bot.send_message(
            chat_id=q.message.chat_id,
            text="üìé –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç.",
            reply_to_message_id=q.message.message_id
        )

    lines = [
        f'‚Äî <a href="{a["href"]}">{a.get("displayName","–§–∞–π–ª")}</a>'
        for a in docs
    ]
    text = "<b>üìé –î–æ–∫—É–º–µ–Ω—Ç—ã:</b>\n" + "\n".join(lines)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–º–µ–Ω–Ω–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–Ω–¥–µ—Ä–æ–º
    await context.bot.send_message(
        chat_id=q.message.chat_id,
        text=text,
        parse_mode="HTML",
        disable_web_page_preview=True,
        reply_to_message_id=q.message.message_id
    )


# --- –û—Ç–º–µ–Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ ---
async def cancel_export_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    try:
        await query.delete_message()
    except:
        await query.edit_message_text("‚ùå –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END


# --- Callback –¥–ª—è –∫–Ω–æ–ø–æ–∫ select_0, select_1‚Ä¶ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ context.user_data['active_key'] ---
async def select_key_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    # –î–æ—Å—Ç–∞—ë–º –∫–ª—é—á –∏–∑ callback_data
    key = query.data.split("_", 2)[-1]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–ª—é—á –µ—Å—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_keys = [k for k, _ in get_user_keys(user_id)]
    if key not in user_keys:
        return await query.edit_message_text("‚ùó –û—à–∏–±–∫–∞: –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    set_active_key(user_id, key)
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìä –í Excel",    callback_data="export_excel")],
        [InlineKeyboardButton("üí¨ –°–æ–æ–±—â–µ–Ω–∏—è–º–∏", callback_data="export_msgs")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞",       callback_data="cancel_export")],
    ])
    await query.edit_message_text(
        text=(
            f"üîë –ê–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:\n`{key}`\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤—ã–≥—Ä—É–∑–∫–∏ —Ç–µ–Ω–¥–µ—Ä–æ–≤:"
        ),
        parse_mode="Markdown",
        reply_markup=kb
    )
 


# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏ ---
async def manage_keys_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    await q.edit_message_text(
    "üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á", callback_data="has_existing")],
            [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á",        callback_data="delete_key")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",       callback_data="go_start")],
        ])
    )
    return ASK_EXISTING


# --- –°–¢–ê–†–¢ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –∏–∑ –ë–î
    user_keys = get_user_keys(user_id)
    if not user_keys:
        now_ms = int(time.time() * 1000)
        for rec in user_keys:
            key_id = rec[0]
            if not is_subscribed(user_id, key_id):
                update_subscription_state(user_id, key_id, now_ms)
        # üëâ –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = update.effective_user
        full_name = user.full_name or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"        
        await update.message.reply_text(f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {full_name}!")
        await update.message.reply_text(
            "–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∫–ª—é—á–∞ ‚Äî –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –∏–∑ —Å–∏—Å—Ç–µ–º—ã:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –î–æ–±–∞–≤–∏—Ç—å", callback_data="has_existing")],
            ])
        )
        return ASK_EXISTING
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á
    active_key = get_active_key(user_id)
    # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª—é—á–∞ –Ω–µ—Ç, –¥–µ–ª–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–µ—Ä–≤—ã–π –∏–∑ —Å–ø–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –∫–ª—é—á –æ–¥–∏–Ω –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–µ –≤—ã–±—Ä–∞–Ω)
    if not active_key and user_keys:
        first_key = user_keys[0][0]
        set_active_key(user_id, first_key)
        active_key = first_key
    # üü° –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ, –∏ –¥–ª—è –º–Ω–æ–≥–∏—Ö –∫–ª—é—á–µ–π
    buttons = []
    for key, name in user_keys:
        label = name or key
        is_active = (key == active_key)
        sub = is_subscribed(user_id, key)
        sub_label = "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è" if sub else "‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
        sub_action = f"unsubscribe_{key}" if sub else f"subscribe_{key}"

        display_label = f"üîπ {label}" if is_active else label

        buttons.append([InlineKeyboardButton(display_label, callback_data=f"select_key_{key}")])
        buttons.append([
            InlineKeyboardButton(sub_label, callback_data=sub_action),
            InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_key_{key}")
        ])

    buttons.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∫–ª—é—á", callback_data="has_existing")])
     # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–≥—Ä—É–∑–∫–∏, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á
    if len(user_keys) == 1:
        buttons.append([InlineKeyboardButton("üì§ –í—ã–≥—Ä—É–∑–∏—Ç—å —Ç–µ–Ω–¥–µ—Ä—ã", callback_data="choose_export_format")])

    await update.message.reply_text(
        "üìå –í–∞—à–∏ –∫–ª—é—á–∏ –ø–æ–∏—Å–∫–∞ —Ç–µ–Ω–¥–µ—Ä–æ–≤:\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–ª—é—á, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã–º –∏ –ø–æ–ª—É—á–∞—Ç—å –ø–æ –Ω–µ–º—É –¥–∞–Ω–Ω—ã–µ.\n"
        "‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è ‚Äî –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. ‚ùå ‚Äî –û—Ç–ø–∏—Å–∞—Ç—å—Å—è.\n"
        "üóë –£–¥–∞–ª–∏—Ç—å ‚Äî —É–±—Ä–∞—Ç—å –∫–ª—é—á.\n\n",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

    return ASK_EXISTING


#–í—ã–±–∏—Ä–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—ã–≥—Ä—É–∑–∫–∏ —Ç–µ–Ω–¥–µ—Ä–æ–≤
async def choose_export_format_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–Ω–¥–µ—Ä–æ–≤:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üì• Excel", callback_data="export_excel")],
            [InlineKeyboardButton("üì© –°–æ–æ–±—â–µ–Ω–∏—è–º–∏", callback_data="export_msgs")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="go_start")]
        ])
    )


# –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
async def delete_key_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query; await q.answer()
    user_keys = get_user_keys(q.from_user.id)
    buttons = []
    for key,name in user_keys:
        label = name or key
        buttons.append([InlineKeyboardButton(f"{key}. {label}", callback_data=f"del_{key}")])
    await q.edit_message_text(
        "üóë –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )
    return DELETING_KEY


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π
async def delete_key_confirm_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –∫–ª—é—á–∞ –∏–∑ callback_data, –Ω–∞—Ö–æ–¥–∏—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á,
    —É–¥–∞–ª—è–µ—Ç –µ–≥–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞–º–∏.
    """
    q = update.callback_query; 
    await q.answer()
    key_id = q.data.split("_", 1)[1]  # –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –∏–∑ callback_data
    user_id = q.from_user.id
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute(
            "DELETE FROM user_keys WHERE tg_user_id=? AND tender_key=?",
            (user_id, key_id)
        )
        # ‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —á–∏—Å—Ç–∏–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        cursor.execute(
            "DELETE FROM subscriptions WHERE tg_user_id=? AND tender_key=?",
            (user_id, key_id)
        )
        cursor.execute(
            "DELETE FROM subscription_state WHERE tg_user_id=? AND tender_key=?",
            (user_id, key_id)
        )
        conn.commit()
    await q.edit_message_text(f"‚úÖ –ö–ª—é—á *{key_id}* —É–¥–∞–ª—ë–Ω.", parse_mode="Markdown")
    return await manage_keys_cb(update, context)


# --- –í–≤–æ–¥ –∫–ª—é—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –ø–æ–∏—Å–∫ –±—É–¥–µ—Ç –ø–æ –ò–î –∏–ª–∏ –∏–º–µ–Ω–∏ ---
async def ask_existing(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    if q.data == "has_existing":
        await q.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª—é—á–∞ *–∏–ª–∏* –µ–≥–æ ID:")
        return ENTER_KEY


# --- –ü–æ–∏—Å–∫ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ —Å–∏—Å—Ç–µ–º–µ Tenderplan ---
async def enter_key(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user_id = update.effective_user.id
    # –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ ID –ø–æ –∏–º–µ–Ω–∏ —Å—Ä–µ–¥–∏ –∫–ª—é—á–µ–π –≤ TenderPlan
    try:
        resp = requests.get(f"{API_URL}/keys/getall", headers=get_headers())
        resp.raise_for_status()
        data = resp.json()
        remote_keys = data if isinstance(data, list) else data.get("keys", []) or data.get("data", [])
        match = [k for k in remote_keys if k["name"].lower() == text.lower()]
        if len(match) == 1:
            key_id = match[0]["_id"]
            tender_name= match[0]["name"]
        else:
            key_id = text
            tender_name= ""
    except Exception as e:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π —Å —Å–µ—Ä–≤–µ—Ä–∞")
        key_id = text
        tender_name = ""
    try:     
        add_user_key(user_id, key_id, tender_name)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞ –≤ –±–∞–∑—É")
        await update.message.reply_text("‚ùóÔ∏è–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.")
        return ASK_MORE
    context.user_data.setdefault("added_keys", []).append(key_id)
    # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º
    kb = [
        [
            InlineKeyboardButton("–î–∞, –µ—â—ë –µ—Å—Ç—å", callback_data="more_yes"),
            InlineKeyboardButton("–ù–µ—Ç, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ", callback_data="more_no"),
        ]
    ]
    await update.message.reply_text(
        f"‚úÖ –ö–ª—é—á `{key_id}` –¥–æ–±–∞–≤–ª–µ–Ω.\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë?",
        reply_markup=InlineKeyboardMarkup(kb),
        parse_mode="Markdown"
    )
    return ASK_MORE


# --- –°–ø—Ä–∞—à–∏–≤–∞–µ–º –µ—â—ë –∫–ª—é—á–∏, –¥–æ–±–∞–≤–ª—è–µ–º –µ—â—ë –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏---
async def ask_more(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª ¬´–î–∞, –µ—â—ë –µ—Å—Ç—å¬ª ‚Äî —Å–Ω–æ–≤–∞ –≤—Ö–æ–¥–∏–º –≤ ENTER_KEY
    if q.data == "more_yes":
        await q.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∫–ª—é—á (–∏–º—è –∏–ª–∏ ID):")
        return ENTER_KEY
    # –ò–Ω–∞—á–µ ‚Äî ¬´–ù–µ—Ç, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ¬ª ‚Üí –≤—ã–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π
    user_id = q.from_user.id
    user_keys = get_user_keys(user_id)
    # –ï—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–µ–π (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    if not user_keys:
        await q.edit_message_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–ª—é—á–∞ ‚Äî –≤–µ—Ä–Ω—ë–º—Å—è –≤ –Ω–∞—á–∞–ª–æ."
        )
        return await start(update, context)
    # –ï—Å–ª–∏ —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω ‚Äî —Å—Ä–∞–∑—É –Ω–∞–∑–Ω–∞—á–∞–µ–º –∏ –¥–∞—ë–º –ø–æ–¥—Å–∫–∞–∑–∫—É /export
    if len(user_keys) == 1:
        only_key, _ = user_keys[0]
        set_active_key(user_id, only_key)
        await q.edit_message_text(
            f"üîë –ê–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á: `{only_key}`\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–≥—Ä—É–∑–∏—Ç—å —Ç–µ–Ω–¥–µ—Ä—ã –∫–æ–º–∞–Ω–¥–æ–π /export",
            parse_mode="Markdown"
        )
        return ConversationHandler.END
    # –ï—Å–ª–∏ –∫–ª—é—á–µ–π –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞
    buttons = [
    [InlineKeyboardButton(f"{idx+1}. {name or key}", callback_data=f"select_key_{key}")]
    for idx, (key, name) in enumerate(user_keys)
    ]
    await q.edit_message_text(
    "–£ –≤–∞—Å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–π ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–π:",
    reply_markup=InlineKeyboardMarkup(buttons)
    )
    return ASK_EXISTING
    

# --- –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â—å ---
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/start ‚Äî –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞, –Ω–∞—á–∞—Ç—å —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞\n"
        "/keys ‚Äî –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–ª—é—á–µ–π, –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π\n"
        "/export ‚Äî –í—ã–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–Ω–¥–µ—Ä–æ–≤ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ–º—É –∫–ª—é—á—É –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ\n"
        "/subscriptions ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞–∫–∏–µ –∫–ª—é—á–∏ –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö —Ç–µ–Ω–¥–µ—Ä–∞—Ö\n"
        "/help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥\n")


# --- –ö–æ–º–∞–Ω–¥–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç–µ–Ω–¥–µ—Ä–æ–≤=—ç–∫—Å–ø–æ—Ä—Ç –≤ excel ---
async def export_tenders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        message = update.callback_query.message
    else:
        message = update.message
    user_id = message.chat.id
    key_id = get_active_key(user_id)
    if not key_id:
        return await message.reply_text(
            "–£ –≤–∞—Å –Ω–µ –≤—ã–±—Ä–∞–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á. –í—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /keys –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π."
        )

    # ‚Äî‚Äî‚Äî‚Äî‚Äî –°–∫–∞—á–∏–≤–∞–µ–º –ø—Ä–µ–≤—å—é –∏ –±–µ—Ä—ë–º max(publicationDate) ‚Äî‚Äî‚Äî‚Äî‚Äî
    resp = requests.get(
        f"{API_URL}/tenders/getlist",
        params={'key': key_id, 'page': 0, 'size': 1000, 'status': 1},
        headers=get_headers(),
        verify=False
    )
    resp.raise_for_status()
    previews = resp.json().get('tenders', [])
    #timestamps = [t.get('publicationDate', 0) for t in previews]
    #max_pub = max(timestamps) if timestamps else int(time.time() * 1000)
    #update_subscription_state(user_id, key_id, max_pub)

    # ‚Äî‚Äî‚Äî‚Äî‚Äî –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç ‚Äî‚Äî‚Äî‚Äî‚Äî
    notice = await message.reply_text("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á—ë—Ç‚Ä¶‚è≥")
    try:
        result = generate_report(key_id)
        report_path = result[0] if isinstance(result, tuple) else result
    except Exception as e:
        await message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á—ë—Ç: {e}")
        return ConversationHandler.END 
    await notice.delete()
    try:
        with open(report_path, "rb") as doc:
            await context.bot.send_document(
                chat_id=user_id,
                document=doc,
                filename=os.path.basename(report_path)
            )
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á—ë—Ç–∞")
    finally:
        if os.path.exists(report_path):
            os.remove(report_path)

    # ‚Äî‚Äî‚Äî‚Äî‚Äî –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è ‚Äî‚Äî‚Äî‚Äî‚Äî
    subscribed = is_subscribed(user_id, key_id)
    buttons = []
    if subscribed:
        buttons.append([InlineKeyboardButton("‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data=f"unsubscribe_{key_id}")])
    else:
        buttons.append([InlineKeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤—ã–µ —Ç–µ–Ω–¥–µ—Ä—ã", callback_data=f"subscribe_{key_id}")])

    buttons.append([InlineKeyboardButton("üîë –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∫–ª—é—á", callback_data="change_key")])
    buttons.append([InlineKeyboardButton("‚Ü©Ô∏è –í –Ω–∞—á–∞–ª–æ", callback_data="go_start")])

    await message.reply_text(
        "‚úÖ –û—Ç—á—ë—Ç –≥–æ—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
        reply_markup=InlineKeyboardMarkup(buttons)
    )
    return ConversationHandler.END

# --- –ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ---
async def subscribe_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    user_id = q.from_user.id    
    key_id = q.data.split("_", 1)[1]

    subscribe_user(user_id, key_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–æ–∫
    await update_keys_menu(q, user_id)
    await q.message.reply_text(
        f"‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–æ–≤—ã–µ —Ç–µ–Ω–¥–µ—Ä—ã –ø–æ –∫–ª—é—á—É `{key_id}`.\n\n"
        "üîÑ –ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–æ–≤—ã–µ —Ç–µ–Ω–¥–µ—Ä—ã –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç –∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
        parse_mode="Markdown"
    )
  


   # --- –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø–∏—Å–∫–∏ ---
async def unsubscribe_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    user_id = q.from_user.id
    key_id = q.data.split("_", 1)[1]

    unsubscribe_user(user_id, key_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–æ–∫
    await update_keys_menu(q, user_id)

    await q.message.reply_text(
        f"‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –∫–ª—é—á—É `{key_id}`.\n\n"
        "üîï –ù–æ–≤—ã–µ —Ç–µ–Ω–¥–µ—Ä—ã –ø–æ —ç—Ç–æ–º—É –∫–ª—é—á—É –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–µ –±—É–¥—É—Ç.",
        parse_mode="Markdown"
    )


#–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é
async def update_keys_menu(q, user_id: int):
    user_keys = get_user_keys(user_id)
    buttons = []
    for i, (key, name) in enumerate(user_keys):
        label = name or key
        sub = is_subscribed(user_id, key)
        sub_label = "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è" if sub else "‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
        sub_action = f"unsubscribe_{key}" if sub else f"subscribe_{key}"
        buttons.append([InlineKeyboardButton(f"{i+1}. {label}", callback_data=f"select_key_{key}")])
        buttons.append([
            InlineKeyboardButton(sub_label, callback_data=sub_action),
            InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_key_{key}")
        ])

    buttons.append([InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∫–ª—é—á", callback_data="has_existing")])

    await q.edit_message_text(
        "üìå –í–∞—à–∏ –∫–ª—é—á–∏ –ø–æ–∏—Å–∫–∞ —Ç–µ–Ω–¥–µ—Ä–æ–≤:\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–µ–Ω–¥–µ—Ä—ã.\n"
        "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ ‚Äî –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—ã–µ —Ç–µ–Ω–¥–µ—Ä—ã. ‚ùå ‚Äî –û—Ç–ø–∏—Å–∞—Ç—å—Å—è.\n"
        "–£–¥–∞–ª–∏—Ç—å ‚Äî –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–±—Ä–∞—Ç—å –∫–ª—é—á.",
        reply_markup=InlineKeyboardMarkup(buttons)
    )


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–º–µ–Ω—É –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª—é—á–∞.
async def change_key_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    user_keys = get_user_keys(q.from_user.id)
    buttons = [[InlineKeyboardButton(f"{i+1}. {name or key}", callback_data=f"select_key_{key}")]
            for i, (key, name) in enumerate(user_keys)]
    await q.edit_message_text(
        "üîë –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )


# --- Callback "–í –Ω–∞—á–∞–ª–æ" ‚Äî –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–æ–≥ /start, –Ω–æ –ø–æ –∫–Ω–æ–ø–∫–µ
async def go_start_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    user_id = q.from_user.id

    user_keys = get_user_keys(user_id)
    if not user_keys:
        full_name = q.from_user.full_name or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        await q.edit_message_text(f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {full_name}!")
        await context.bot.send_message(
            chat_id=user_id,
            text="–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∫–ª—é—á–∞ ‚Äî –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –∏–∑ —Å–∏—Å—Ç–µ–º—ã:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –î–æ–±–∞–≤–∏—Ç—å", callback_data="has_existing")]
            ])
        )
        return ASK_EXISTING
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á
    active_key = get_active_key(user_id)

    # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–∞–∑–Ω–∞—á–∏–º –ø–µ—Ä–≤—ã–π
    if not active_key and user_keys:
        first_key = user_keys[0][0]
        set_active_key(user_id, first_key)
        active_key = first_key

    buttons = []
    for key, name in user_keys:
        label = name or key
        is_active = (key == active_key)
        sub = is_subscribed(user_id, key)
        sub_label = "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è" if sub else "‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
        sub_action = f"unsubscribe_{key}" if sub else f"subscribe_{key}"

        display_label = f"üîπ {label}" if is_active else label

        buttons.append([InlineKeyboardButton(display_label, callback_data=f"select_key_{key}")])
        buttons.append([
            InlineKeyboardButton(sub_label, callback_data=sub_action),
            InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_key_{key}")
        ])

    buttons.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∫–ª—é—á", callback_data="has_existing")])

    # –ö–Ω–æ–ø–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ ‚Äî –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á
    if len(user_keys) == 1:
        buttons.append([InlineKeyboardButton("üì§ –í—ã–≥—Ä—É–∑–∏—Ç—å —Ç–µ–Ω–¥–µ—Ä—ã", callback_data="choose_export_format")])

    await q.edit_message_text(
        "üìå –í–∞—à–∏ –∫–ª—é—á–∏ –ø–æ–∏—Å–∫–∞ —Ç–µ–Ω–¥–µ—Ä–æ–≤:\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–ª—é—á, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã–º –∏ –ø–æ–ª—É—á–∞—Ç—å –ø–æ –Ω–µ–º—É –¥–∞–Ω–Ω—ã–µ.\n"
        "‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è ‚Äî –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. ‚ùå ‚Äî –û—Ç–ø–∏—Å–∞—Ç—å—Å—è.\n"
        "üóë –£–¥–∞–ª–∏—Ç—å ‚Äî —É–±—Ä–∞—Ç—å –∫–ª—é—á.\n\n",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

    return ASK_EXISTING
    

# --- –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤—ã—Ö —Ç–µ–Ω–¥–µ—Ä–æ–≤ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ ---
async def check_new_tenders(context: ContextTypes.DEFAULT_TYPE):
    bot = context.bot
    now_ts = int(datetime.now().timestamp() * 1000)  # —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º—Å
    for user_id, key in get_subscriptions():
        last_ts = get_last_ts(user_id, key)
        print(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á {key} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, last_ts={last_ts}")
        all_new_tenders = []
        page = 0
        size = 50
        while True:
            try:
                resp = requests.get(
                    f"{API_URL}/tenders/v2/getlist",
                    params={
                        'type': 0,
                        'id': key,
                        'statuses': [1],
                        'page': page,
                        'size': size,
                        'fromPublicationDateTime': last_ts,
                        'publicationDateTime': -1
                    },
                    headers=get_headers(),
                    verify=False
                )
                resp.raise_for_status()
                batch = resp.json().get('tenders', [])
                print(f"[INFO] –ö–ª—é—á {key}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}, –≤—Å–µ–≥–æ —Ç–µ–Ω–¥–µ—Ä–æ–≤ –≤ batch: {len(batch)}")
                #–û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ (–µ—â—ë –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω—ã)
                new_items = [
                    t for t in batch
                    if (t.get("submissionCloseDateTime") or t.get("submissionCloseDate") or 0) > now_ts
                ]
                if not new_items and len(batch) < size:
                    print(f"[INFO] –ù–µ—Ç –Ω–æ–≤—ã—Ö —Ç–µ–Ω–¥–µ—Ä–æ–≤ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –≤—ã—Ö–æ–¥–∏–º.")
                    # –ï—Å–ª–∏ –Ω–æ–≤—ã—Ö –Ω–µ—Ç –∏ –¥–∞–ª—å—à–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å ‚Äî –≤—ã—Ö–æ–¥–∏–º
                    break

                all_new_tenders.extend(new_items)
                # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ –º–µ–Ω—å—à–µ, —á–µ–º size ‚Äî –∑–Ω–∞—á–∏—Ç –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                if len(batch) < size:
                    print(f"[INFO] –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª—É—á–µ–Ω–∞.")
                    break
                page += 1
            except Exception as e:
                print(f"[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–Ω–¥–µ—Ä–æ–≤ –ø–æ –∫–ª—é—á—É {key}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: {e}")
                break
        if not all_new_tenders:
            print(f"[INFO] –î–ª—è –∫–ª—é—á–∞ {key} –Ω–æ–≤—ã—Ö —Ç–µ–Ω–¥–µ—Ä–æ–≤ –Ω–µ—Ç.")
            continue
        print(f"–ù–æ–≤—ã—Ö —Ç–µ–Ω–¥–µ—Ä–æ–≤ –≤—Å–µ–≥–æ: {len(all_new_tenders)}")
        for preview in all_new_tenders:
            try:
                tid = preview.get('_id')
                if was_tender_sent(user_id, tid):
                    print(f"[SKIP] –¢–µ–Ω–¥–µ—Ä {tid} —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                    continue
                detail = fetch_tender_detail(preview)
                key_name = get_key_name(user_id, key)
                text = f"üîë –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ –∫–ª—é—á—É: <b>{key_name}</b>\n\n" + format_tender_message(detail)
                atts = detail.get('attachments', [])
                tid = detail.get('_id', '')
                if atts:
                    save_attachments(tid, atts)
                    kb = InlineKeyboardMarkup([[InlineKeyboardButton("üìé –î–æ–∫—É–º–µ–Ω—Ç—ã", callback_data=f"show_sub_atts:{tid}")]])
                else:
                    kb = None
                try:
                    await bot.send_message(
                        chat_id=user_id,
                        text=text,
                        parse_mode="HTML",
                        disable_web_page_preview=True,
                        reply_markup=kb
                    )
                except RetryAfter as e:
                    await asyncio.sleep(e.retry_after)
                    await bot.send_message(chat_id=user_id,text=text,
                                            parse_mode="HTML",
                                            disable_web_page_preview=True,
                                            reply_markup=kb)
                # ‚úÖ –û—Ç–º–µ—á–∞–µ–º —Ç–µ–Ω–¥–µ—Ä –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π
                mark_tender_as_sent(user_id, tid)
                await asyncio.sleep(0.1)
            except Exception as e:
                print(f"[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–Ω–¥–µ—Ä–∞: {e}")
                continue

                # –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ —Ç–µ–Ω–¥–µ—Ä—ã
        filtered = [t for t in all_new_tenders if isinstance(t, dict)]
        if filtered:
            new_max = max(t.get('publicationDateTime', 0) for t in filtered)
            if new_max > last_ts:
                print(f"–û–±–Ω–æ–≤–ª—è–µ–º last_ts —Å {last_ts} –Ω–∞ {new_max} –¥–ª—è –∫–ª—é—á–∞ {key}")
                update_subscription_state(user_id, key, new_max)
            else:
                print(f"[DEBUG] new_max ({new_max}) <= last_ts ({last_ts}) ‚Äî –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º.")
        else:
            print(f"–ù–µ—Ç –Ω–æ–≤—ã—Ö —Ç–µ–Ω–¥–µ—Ä–æ–≤ –¥–ª—è –∫–ª—é—á–∞ {key}, last_ts –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º.")


def save_attachments(tender_id: str, attachments: list[dict]):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–ª–æ–∂–µ–Ω–∏–π (–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤) –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ–Ω–¥–µ—Ä–∞ –≤ —Ç–∞–±–ª–∏—Ü—É attachments.

    - tender_id: ID —Ç–µ–Ω–¥–µ—Ä–∞.
    - attachments: [{"displayName": "–î–æ–∫—É–º–µ–Ω—Ç.pdf", "href": "https://..."}]
    """
    with get_connection() as conn:
        cursor = conn.cursor()
        for att in attachments:
            file_name = att.get("displayName") or att.get("fileName") or "–§–∞–π–ª"
            url = att.get("href") or att.get("url")
            if url:  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞
                cursor.execute("""
                    INSERT OR IGNORE INTO attachments (tender_id, file_name, url)
                    VALUES (?, ?, ?)
                """, (tender_id, file_name, url))
        conn.commit()



def get_attachments(tender_id: str) -> list[tuple[str, str]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–ª–æ–∂–µ–Ω–∏–π (–∏–º—è —Ñ–∞–π–ª–∞ –∏ URL) –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–µ–Ω–¥–µ—Ä–∞.

    - tender_id: ID —Ç–µ–Ω–¥–µ—Ä–∞.
    - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (file_name, url).
    - –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.
    """
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT file_name, url FROM attachments WHERE tender_id=?", (tender_id,))
        return cursor.fetchall()

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–∫—É–º–µ–Ω—Ç—ã"
async def show_attachments_sub_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    _, tid = q.data.split(":", 1)

    docs = get_attachments(tid)  # [(file_name, url), ...]

    if not docs:
        return await context.bot.send_message(
            chat_id=q.message.chat_id,
            text="üìé –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç.",
            reply_to_message_id=q.message.message_id
        )

    lines = [f'‚Äî <a href="{url}">{name}</a>' for name, url in docs]
    text = "<b>üìé –î–æ–∫—É–º–µ–Ω—Ç—ã:</b>\n" + "\n".join(lines)

    await context.bot.send_message(
        chat_id=q.message.chat_id,
        text=text,
        parse_mode="HTML",
        disable_web_page_preview=True,
        reply_to_message_id=q.message.message_id
    )



def get_key_name(user_id: int, key: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –∫–ª—é—á–∞ (tender_name) –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–ª—é—á–∞.
    –ï—Å–ª–∏ –∏–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∞–º –∫–ª—é—á –∫–∞–∫ fallback.
    """
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute(
            "SELECT tender_name FROM user_keys WHERE tg_user_id = ? AND tender_key = ?",
            (user_id, key)
        )
        row = cursor.fetchone()
    return row[0] if row and row[0] else key


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫: –ª–æ–≥–∏—Ä—É–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è, –≤–æ–∑–Ω–∏–∫—à–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π Telegram.
async def error_handler(update, context):
    logger.error("Exception while handling an update:", exc_info=context.error)


async def show_user_subscriptions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –î–µ–ª–∞–µ—Ç JOIN –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏ subscriptions –∏ user_keys,
    —á—Ç–æ–±—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏–º—è –∫–ª—é—á–∞ (–µ—Å–ª–∏ –æ–Ω–æ –∑–∞–¥–∞–Ω–æ).
    –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–µ—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
    """
    user_id = update.effective_user.id
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute(
            """
            SELECT s.tender_key, k.tender_name 
            FROM subscriptions s
            LEFT JOIN user_keys k ON s.tg_user_id = k.tg_user_id AND s.tender_key = k.tender_key
            WHERE s.tg_user_id = ?
            """, 
            (user_id,)
            )
        rows = cursor.fetchall()
    if not rows:
        await update.message.reply_text("üîï –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
        return
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–¥–ø–∏—Å–æ–∫
    lines = []
    for key, name in rows:
        name_part = f" ‚Äî {name}" if name else ""
        lines.append(f"üîî `{key}`{name_part}")
    text = "üì¨ *–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–ª—é—á–∏:*\n\n" + "\n".join(lines)
    await update.message.reply_text(text, parse_mode="Markdown")


async def refresh_keys_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã TenderPlan —á–µ—Ä–µ–∑ API.
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–º–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª—é—á–µ–π –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –∏ –≤—ã–≤–æ–¥–∏—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
    –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª—é—á–∞.
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ –∫–ª—é—á–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã –Ω–∞ —Å–∞–π—Ç–µ.
    """
    q = update.callback_query
    await q.answer()
    user_id = q.from_user.id

    # 1) –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –∏–∑ TenderPlan
    try:
        resp = requests.get(f"{API_URL}/keys/getall", headers=get_headers())
        resp.raise_for_status()
        payload = resp.json()
        remote = payload if isinstance(payload, list) else payload.get("keys", []) or payload.get("data", [])
    except Exception as e:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∫–ª—é—á–∏ –∏–∑ TenderPlan")
        return await q.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª—é—á–µ–π: {e}")

    # 2) –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
    existing = {key: name for key, name in get_user_keys(user_id)}
    for k in remote:
        key_id   = k.get("_id") or k.get("id")
        key_name = k.get("name", "")
        # –µ—Å–ª–∏ —Ç–∞–∫–æ–π –∫–ª—é—á —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω —Ä—É–∫–∞–º–∏ ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –∏–º—è
        if key_id in existing and key_name and key_name != existing[key_id]:
            with get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute(
                    "UPDATE user_keys SET tender_name = ? WHERE tg_user_id = ? AND tender_key = ?",
                    (key_name, user_id, key_id)
                )
                conn.commit()
    # 3) –°–æ–±–∏—Ä–∞–µ–º —É–∂–µ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ –ë–î
    user_keys = get_user_keys(user_id)
    buttons = []
    for i, rec in enumerate(user_keys):
        key_id, name = rec if isinstance(rec, tuple) else (rec, "")
        buttons.append([InlineKeyboardButton(f"{i+1}. {name or key_id[:8]}‚Ä¶", callback_data=f"select_key_{key_id}")])
    buttons.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π", callback_data="refresh_keys")])

    await q.edit_message_text(
        "üîë –í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∫–ª—é—á–∏ (–æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫):",
        reply_markup=InlineKeyboardMarkup(buttons)
    )
    return ASK_EXISTING


if __name__ == '__main__':
    request = HTTPXRequest(
    connection_pool_size=50,
    pool_timeout=10.0            
    )
    app = (ApplicationBuilder().token(BOT_TOKEN).request(request).build())

    # –û–ß–ò–©–ê–ï–ú –í–°–ï –ö–û–ú–ê–ù–î–´ –û–î–ò–ù –†–ê–ó
    asyncio.get_event_loop().run_until_complete(app.bot.set_my_commands([]))

    # <-- —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    asyncio.get_event_loop().run_until_complete(
        app.bot.set_my_commands([
            BotCommand("start",  "–ó–∞–ø—É—Å—Ç–∏—Ç—å/–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            BotCommand("export", "–í—ã–≥—Ä—É–∑–∏—Ç—å —Ç–µ–Ω–¥–µ—Ä—ã –ø–æ –∞–∫—Ç–∏–≤–Ω–æ–º—É –∫–ª—é—á—É"),
            BotCommand("keys",   "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏"),
            BotCommand("subscriptions", "–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏"),
            BotCommand("help",   "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"),
        ])
    )
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º –º–µ–Ω—é
    asyncio.get_event_loop().run_until_complete(
        app.bot.set_chat_menu_button(menu_button=MenuButtonCommands())
    )

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start),
                      CommandHandler("keys",  keys_command),
                      CommandHandler("export", export_choice_cb),
                      CallbackQueryHandler(ask_existing, pattern="^has_existing$"),
                      ],
        states={
            ASK_EXISTING: [
            CommandHandler("start", start),  # <‚Äî —Ç–µ–ø–µ—Ä—å /start –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –∑–∞—Ü–µ–ø–∏—Ç—Å—è
            CommandHandler("keys",  keys_command),
            CommandHandler("export", export_choice_cb),
            CallbackQueryHandler(ask_existing,    pattern="^(has_existing|no_existing)$"),
            CallbackQueryHandler(refresh_keys_cb, pattern="^refresh_keys$"),
            CallbackQueryHandler(export_to_messages_cb, pattern="^export_msgs$"),
            CallbackQueryHandler(export_tenders,pattern="^export_excel$"),
            CallbackQueryHandler(cancel_export_cb,      pattern="^cancel_export$"),
            CallbackQueryHandler(select_key_cb,   pattern=r"^select(_key)?_\d+$"),
            # ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ
            CallbackQueryHandler(delete_key_cb, pattern=r"^delete_key_.+$"),

            CallbackQueryHandler(change_key_cb,     pattern="^change_key$"),
            CallbackQueryHandler(go_start_cb,   pattern="^go_start$"),
            CallbackQueryHandler(finish_cb,       pattern="^finish$")
        ],
        ENTER_KEY: [ MessageHandler(filters.TEXT & ~filters.COMMAND, enter_key) ],
        ASK_MORE:  [ CallbackQueryHandler(ask_more, pattern="^more_") ],
        DELETING_KEY: [ CallbackQueryHandler(delete_key_confirm_cb, pattern=r"^del_.+$") ],
        
    },
    fallbacks=[CommandHandler("help", help_command)],
    )
    app.add_handler(conv)
    app.add_handler(CallbackQueryHandler(manage_keys_cb,    pattern="^manage_keys$"))
    app.add_handler(CommandHandler("keys",  keys_command))
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("subscriptions", show_user_subscriptions))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("export", export_choice_cb))
    app.add_handler(CallbackQueryHandler(subscribe_cb, pattern=r"^subscribe_.+$"))
    app.add_handler(CallbackQueryHandler(unsubscribe_cb, pattern=r"^unsubscribe_.+$"))
    app.add_handler(CallbackQueryHandler(change_key_cb, pattern="^change_key$"))
    app.add_handler(CallbackQueryHandler(refresh_keys_cb, pattern="^refresh_keys$"))
   # ‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–ª—é—á–∞ (–∏ –¥–ª—è /start, –∏ –¥–ª—è /export):
    app.add_handler(CallbackQueryHandler(select_key_cb, pattern=r"^select(_key)?_.+$"))
    app.add_handler(CallbackQueryHandler(ask_existing, pattern="^has_existing$"))
    app.add_handler(CallbackQueryHandler(export_to_messages_cb, pattern="^export_msgs$"))
    app.add_handler(CallbackQueryHandler(show_attachments_cb, pattern=r"^show_atts:"))
    app.add_handler(CallbackQueryHandler(go_start_cb, pattern="^go_start$"))
    app.add_handler(CallbackQueryHandler(export_tenders,pattern="^export_excel$"))
    app.add_handler(CallbackQueryHandler(cancel_export_cb,      pattern="^cancel_export$"))
    app.add_handler(CallbackQueryHandler(cancel_export_cb, pattern="^cancel_export$", block=False))
    app.add_handler(CallbackQueryHandler(delete_key_cb, pattern=r"^delete_key_.+$"))    # –ø–µ—Ä–≤—ã–π —à–∞–≥
    app.add_handler(CallbackQueryHandler(delete_key_confirm_cb, pattern=r"^del_.+$")) # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    app.add_handler(CallbackQueryHandler(show_attachments_sub_cb, pattern=r"^show_sub_atts:"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, enter_key))

    app.add_handler(CallbackQueryHandler(choose_export_format_cb, pattern="^choose_export_format$"))

    app.add_error_handler(error_handler)
    # –∑–∞–ø—É—Å—Ç–∏–º job –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    app.job_queue.run_repeating(check_new_tenders, interval=1800, first=10)
    app.run_polling()