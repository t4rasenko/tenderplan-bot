import requests
import time
import logging
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor, as_completed
from config import TOKEN
# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ —Å–µ—Å—Å–∏—è
BASE_URL = 'https://tenderplan.ru/api'
HEADERS = {
    'Authorization': f'Bearer {TOKEN}',
    'Accept': 'application/json',
    'Content-Type': 'application/json',
}

session = requests.Session()
session.headers.update(HEADERS)
# ‚îÄ‚îÄ‚îÄ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Å—Ç–∞—Ç—É—Å–æ–≤ –≤–Ω—É—Ç—Ä–∏ –∫–æ–¥–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
STATUS_LOOKUP = {
    1: "–ü—Ä–∏–µ–º –∑–∞—è–≤–æ–∫",
    4: "–û—Ç–º–µ–Ω–µ–Ω–æ",
    5: "–ù–µ —Å–æ—Å—Ç–æ—è–ª–æ—Å—å",
    2: "–†–∞–±–æ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏",
    3: "–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
    7: "–ò—Å–ø–æ–ª–Ω—è–µ—Ç—Å—è",
    6: "–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
    8: "–†–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–µ",
    0: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
}
# ‚îÄ‚îÄ‚îÄ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –§–ó ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
FZ_LOOKUP = {
    0: "223-–§–ó",
    1: "44-–§–ó",
}

# ‚îÄ‚îÄ‚îÄ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Å–ø–æ—Å–æ–±–æ–≤ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
PLACINGWAY_LOOKUP = {
    0: "–ò–°",  1: "–û–ö",  2: "–û–ê",  3: "–≠–§",  4: "–ó–ö",  5: "–ü–û",
    6: "–ï–ü",  7: "–û–ö–£", 8: "–û–ö–î", 9: "–ó–ö–ö",10: "–ó–ö–ö–£",11: "–ó–ö–ö–î",
   12: "–ó–ê", 13: "–ó–ö–ë",14: "–ó–ü",15: "–≠–ê",16: "–ò–°–ú",17: "–°–ó",18: "–ò–û–°",
   19: "–†–ï–î",20: "–ü–ï–†",21: "–ö–ü",22: "–ó–ö–≠–§",23: "–û–ö–≠–§",24: "–ó–ü–≠–§",
   25: "–û–ö–£–≠–§",26: "–û–ö–î–≠–§",27: "–ó–¶",28: "–ì–ê",29: "–ü–ü"
}


def fetch_all_tenders(key_id: str) -> str:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –ø—Ä–µ–≤—å—é —Ç–µ–Ω–¥–µ—Ä–æ–≤ –ø–æ –∫–ª—é—á—É, –≤—ã–ø–æ–ª–Ω—è—è –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å.
    """
    all_tenders = []
    page = 0
    size = 50  # —Å–∫–æ–ª—å–∫–æ —Ç–µ–Ω–¥–µ—Ä–æ–≤ –∑–∞ 1 –∑–∞–ø—Ä–æ—Å
    while True:
        resp = session.get(
           f"{BASE_URL}/tenders/v2/getlist",
           params={
            'type': 0,
            'id': key_id,
            'statuses': [1],
            'page': page,
            'size': size
        },
            verify=False
        )
        resp.raise_for_status()
        raw_batch = resp.json().get('tenders', [])
        # –≤—Ä—É—á–Ω—É—é —Ñ–∏–ª—å—Ç—Ä—É–µ–º, —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ –æ—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ "–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–æ–∫"
        now_ts = int(datetime.now().timestamp() * 1000)
        batch = [
            t for t in raw_batch
            if t.get("status") == 1 and
               (t.get("submissionCloseDateTime") or t.get("submissionCloseDate") or 0) > now_ts
        ]
        if not batch:
            break
        all_tenders.extend(batch)
        page += 1
        # –µ—Å–ª–∏ –ø—Ä–∏—à–ª–æ –º–µ–Ω—å—à–µ, —á–µ–º –∑–∞–ø—Ä–æ—à–µ–Ω–æ ‚Äî –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        if len(raw_batch) < size:
            break

    print(f"–í—Å–µ–≥–æ —Ç–µ–Ω–¥–µ—Ä–æ–≤ –ø–æ—Å–ª–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {len(all_tenders)}")

    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ _id
    seen = set()
    unique_tenders = []
    for t in all_tenders:
        tid = t.get('_id')
        if tid in seen:
            continue
        seen.add(tid)
        unique_tenders.append(t)
    all_tenders = unique_tenders
    print(f"–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(all_tenders)} —Ç–µ–Ω–¥–µ—Ä–æ–≤")
    return all_tenders

def fetch_tender_detail(preview: dict) -> dict:
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ —Ç–µ–Ω–¥–µ—Ä–∞ –ø–æ –µ–≥–æ ID.
    –î–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞—ë—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ,
    —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä—É—à–∞—Ç—å –ø–æ—Ç–æ–∫ –ª–æ–≥–∏–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å last_ts.
    """
    tid = preview.get('_id')
    try:
        resp = session.get(
            f"{BASE_URL}/tenders/get",
            params={'id': tid},
            verify=False
        )
        resp.raise_for_status()
        detail = resp.json() or {}
        # –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–æ–ø. –ø–æ–ª–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –∏–∑ –ø—Ä–µ–≤—å—é
        detail['_preview_status'] = preview.get('status', 0)
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤–∞–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ‚Äî –ø–æ–¥—Å—Ç—Ä–∞—Ö—É–µ–º—Å—è, –Ω–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
        if not detail.get("publicationDate"):
            detail["publicationDate"] = preview.get("publicationDateTime", 0)
        return detail
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–Ω–¥–µ—Ä–∞ {tid}: {e}")
        return {
            "_id": tid,
            "documents": [],
            "publicationDate": preview.get("publicationDateTime", 0),
            "noticeNumber": preview.get("noticeNumber", "‚Äî"),
            "_preview_status": preview.get("status", 0)
        }


def format_tender_message(detail: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–Ω–¥–µ—Ä–µ –≤ —Ç–µ–∫—Å—Ç –¥–ª—è Telegram.
    """

    num = detail.get('number', detail.get('_id', ''))
    name = detail.get('orderName', '')
    header = f"‚Ññ {num}  {name}" 
    close_ts = detail.get("submissionCloseDateTime") or detail.get("submissionCloseDate", 0)
    close_dt = datetime.fromtimestamp(close_ts/1000) if close_ts else ""
    # ‚Äî‚Äî –û–ë–†–ê–ë–û–¢–ö–ê –¶–ï–ù–´ –° –í–ê–õ–Æ–¢–û–ô ‚Äî‚Äî
    price = detail.get('maxPrice')
    currency_code = (detail.get('currency') or '').upper()
    # —Å–ª–æ–≤–∞—Ä—å —Å–∏–º–≤–æ–ª–æ–≤ –≤–∞–ª—é—Ç (–¥–æ–ø–∏—Å–∞—Ç—å –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
    CURRENCY_SYMBOLS = {
        'RUB': '‚ÇΩ',
        'USD': '$',
        'EUR': '‚Ç¨',
    }
    curr_sym = CURRENCY_SYMBOLS.get(currency_code, currency_code)
    if price is None:
        price_text = "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
    else:
        # —Ñ–æ—Ä–º–∞—Ç —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º —Ç—ã—Å—è—á
        price_text = f"{int(price):,}".replace(",", "‚ÄØ")  # –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–π –ø—Ä–æ–±–µ–ª –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        price_text += f"‚ÄØ{curr_sym}"

    # –°—Å—ã–ª–∫–∏
    app_url = f"https://tenderplan.ru/app?key={detail.get('key')}\&tender={detail.get('_id')}"
    eis_link = detail.get('href') or ''
    
    fz_id = detail.get("type")  
    fz = FZ_LOOKUP.get(fz_id, "")
    placing_code = detail.get("placingWay")
    placing = ""
    if isinstance(placing_code, int):
        placing = PLACINGWAY_LOOKUP.get(placing_code, "")
    elif str(placing_code).isdigit():
        placing = PLACINGWAY_LOOKUP.get(int(placing_code), "")
    torg_type=" ".join(part for part in (fz, placing) if part)
    


    lines = [
        header,
        f"üìÖ <b>–ü—Ä–∏—ë–º –∑–∞—è–≤–æ–∫ –¥–æ:</b> {close_dt}",
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {price_text}",
    ]
    if torg_type:
        lines.append(f"üìÇ <b>–¢–∏–ø —Ç–æ—Ä–≥–æ–≤:</b> {torg_type}")
   

    # —Å–∫—Ä—ã—Ç—ã–µ —Å—Å—ã–ª–∫–∏ –∑–∞ —Ç–µ–∫—Å—Ç–æ–º
    if eis_link:
        lines.append(f'üîó <a href="{eis_link}">–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–Ω–¥–µ—Ä</a>')
    #lines.append(f'üîó <a href="{app_url}">TenderPlan</a>')

    return "\n".join(lines)

def export_messages(key_id: str) -> list[tuple[str,str,list[dict]]]:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ —Ç–µ–Ω–¥–µ—Ä—ã —Ç–æ–ª—å–∫–æ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–æ–∫' –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π:
    (tender_id, formatted_text, attachments_list).
    """
    previews = fetch_all_tenders(key_id)
    messages: list[tuple[str,str,list[dict]]] = []

    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª–µ–π
    with ThreadPoolExecutor(max_workers=10) as executor:
        futures = [executor.submit(fetch_tender_detail, p) for p in previews]
        for fut in as_completed(futures):
            try:
                detail = fut.result()
                tid  = detail.get("_id", "")
                text = format_tender_message(detail)
                atts = detail.get("attachments", [])
                messages.append((tid, text, atts))
            except Exception:
                # –º–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É
                continue
    return messages
